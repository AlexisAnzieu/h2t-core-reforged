### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Event {
  id: Int!
}

input EventCreateInput {
  createdAt: DateTime
  date: String!
  description: String!
  image: String!
  locations: String!
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input EventOrderByInput {
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  locations: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input EventWhereInput {
  AND: [EventWhereInput!]
  createdAt: DateTimeFilter
  date: StringFilter
  description: StringFilter
  id: IntFilter
  image: StringFilter
  locations: StringFilter
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input EventWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneEvent(data: EventCreateInput!): Event!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: [EventOrderByInput!], where: EventWhereInput): [Event!]!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
