### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Ad {
  additionalData: Json
  author: User!
  authorId: String!
  available: Boolean!
  categories: AdCategory!
  createdAt: DateTime!
  description: String
  id: ID!
  picture: String
  title: String!
  updatedAt: DateTime!
  zipCode: String!
}

enum AdCategory {
  CUISINE
  DIVERS
  ELECTRONIQUE
  JEU
  LIVRE
  MAISON
  SERVICE
  VETEMENT
}

type AuthPayload {
  code: Int
  message: String!
  token: String
  user: User
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Event {
  createdAt: DateTime!
  date: String!
  description: String!
  id: ID!
  image: String!
  locations: String!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

type Invitation {
  id: ID!
  receiver: User
  sent: String
  uid: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  email: String!
  password: String!
}

type MessagePayload {
  code: Int
  message: String!
}

type Mutation {
  accountActivation(token: String!): MessagePayload!
  login(loginInput: LoginInput!): AuthPayload!
  signup(signupInput: SignupInput!): AuthPayload!
}

type Poem {
  author: User
  authorId: String
  createdAt: DateTime!
  description: String!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type Query {
  ad: Ad
  ads: [Ad]
  event: [Event]
  generateSignature(folder: String, public_id: String, source: String!, timestamp: Int!): MessagePayload
  poem: Poem
  poems: [Poem]
  user(id: String!): User
  users: [User]
}

input SignupInput {
  birthday: String
  email: String!
  facebookUrl: String
  firstName: String!
  invitation: String!
  lastName: String
  password: String!
}

type User {
  ads: [Ad!]!
  birthday: DateTime
  createdAt: DateTime!
  description: String
  email: String!
  facebookUrl: String
  firstName: String!
  hasDoorAccess: Boolean!
  id: ID!
  invitations: [Invitation!]!
  invitedBy: User
  lastName: String
  level: Int!
  password: String!
  picture: String
  poems: [Poem!]!
  updatedAt: DateTime!
}
