/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * The `Byte` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Bytes";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Decimal";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  SignupInput: { // input type
    birthday?: string | null; // String
    email: string; // String!
    facebookUrl?: string | null; // String
    firstName: string; // String!
    invitation: string; // String!
    lastName?: string | null; // String
    password: string; // String!
  }
}

export interface NexusGenEnums {
  AdCategory: "CUISINE" | "DIVERS" | "ELECTRONIQUE" | "JEU" | "LIVRE" | "MAISON" | "SERVICE" | "VETEMENT"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Ad: { // root type
    additionalData?: NexusGenScalars['Json'] | null; // Json
    authorId: string; // String!
    available: boolean; // Boolean!
    categories: NexusGenEnums['AdCategory']; // AdCategory!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: string; // ID!
    picture?: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    zipCode: string; // String!
  }
  AuthPayload: { // root type
    code?: number | null; // Int
    message: string; // String!
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Event: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: string; // String!
    description: string; // String!
    id: string; // ID!
    image: string; // String!
    locations: string; // String!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Invitation: { // root type
    id: string; // ID!
    sent?: string | null; // String
    uid: string; // String!
  }
  MessagePayload: { // root type
    code?: number | null; // Int
    message: string; // String!
  }
  Mutation: {};
  Poem: { // root type
    authorId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  User: { // root type
    birthday?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    email: string; // String!
    facebookUrl?: string | null; // String
    firstName: string; // String!
    hasDoorAccess: boolean; // Boolean!
    id: string; // ID!
    lastName?: string | null; // String
    level: number; // Int!
    password: string; // String!
    picture?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Ad: { // field return type
    additionalData: NexusGenScalars['Json'] | null; // Json
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // String!
    available: boolean; // Boolean!
    categories: NexusGenEnums['AdCategory']; // AdCategory!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: string; // ID!
    picture: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    zipCode: string; // String!
  }
  AuthPayload: { // field return type
    code: number | null; // Int
    message: string; // String!
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Event: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: string; // String!
    description: string; // String!
    id: string; // ID!
    image: string; // String!
    locations: string; // String!
    published: boolean; // Boolean!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Invitation: { // field return type
    id: string; // ID!
    receiver: NexusGenRootTypes['User'] | null; // User
    sent: string | null; // String
    uid: string; // String!
  }
  MessagePayload: { // field return type
    code: number | null; // Int
    message: string; // String!
  }
  Mutation: { // field return type
    accountActivation: NexusGenRootTypes['MessagePayload']; // MessagePayload!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Poem: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    authorId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    ad: NexusGenRootTypes['Ad'] | null; // Ad
    ads: Array<NexusGenRootTypes['Ad'] | null> | null; // [Ad]
    event: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    generateSignature: NexusGenRootTypes['MessagePayload'] | null; // MessagePayload
    poem: NexusGenRootTypes['Poem'] | null; // Poem
    poems: Array<NexusGenRootTypes['Poem'] | null> | null; // [Poem]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    ads: NexusGenRootTypes['Ad'][]; // [Ad!]!
    birthday: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    email: string; // String!
    facebookUrl: string | null; // String
    firstName: string; // String!
    hasDoorAccess: boolean; // Boolean!
    id: string; // ID!
    invitations: NexusGenRootTypes['Invitation'][]; // [Invitation!]!
    invitedBy: NexusGenRootTypes['User'] | null; // User
    lastName: string | null; // String
    level: number; // Int!
    password: string; // String!
    picture: string | null; // String
    poems: NexusGenRootTypes['Poem'][]; // [Poem!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Ad: { // field return type name
    additionalData: 'Json'
    author: 'User'
    authorId: 'String'
    available: 'Boolean'
    categories: 'AdCategory'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    picture: 'String'
    title: 'String'
    updatedAt: 'DateTime'
    zipCode: 'String'
  }
  AuthPayload: { // field return type name
    code: 'Int'
    message: 'String'
    token: 'String'
    user: 'User'
  }
  Event: { // field return type name
    createdAt: 'DateTime'
    date: 'String'
    description: 'String'
    id: 'ID'
    image: 'String'
    locations: 'String'
    published: 'Boolean'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Invitation: { // field return type name
    id: 'ID'
    receiver: 'User'
    sent: 'String'
    uid: 'String'
  }
  MessagePayload: { // field return type name
    code: 'Int'
    message: 'String'
  }
  Mutation: { // field return type name
    accountActivation: 'MessagePayload'
    login: 'AuthPayload'
    signup: 'AuthPayload'
  }
  Poem: { // field return type name
    author: 'User'
    authorId: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    ad: 'Ad'
    ads: 'Ad'
    event: 'Event'
    generateSignature: 'MessagePayload'
    poem: 'Poem'
    poems: 'Poem'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    ads: 'Ad'
    birthday: 'DateTime'
    createdAt: 'DateTime'
    description: 'String'
    email: 'String'
    facebookUrl: 'String'
    firstName: 'String'
    hasDoorAccess: 'Boolean'
    id: 'ID'
    invitations: 'Invitation'
    invitedBy: 'User'
    lastName: 'String'
    level: 'Int'
    password: 'String'
    picture: 'String'
    poems: 'Poem'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    accountActivation: { // args
      token: string; // String!
    }
    login: { // args
      loginInput: NexusGenInputs['LoginInput']; // LoginInput!
    }
    signup: { // args
      signupInput: NexusGenInputs['SignupInput']; // SignupInput!
    }
  }
  Query: {
    generateSignature: { // args
      folder?: string | null; // String
      public_id?: string | null; // String
      source: string; // String!
      timestamp: number; // Int!
    }
    user: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}